from z3 import *

#v40=[0x19,0xc3,0xff,0xf2,0x27,0xfd,0xc4,0xd2,0x14,0xe3,0xc1,0xca,0x26,0xef,0xe7,0xe8,0x0,0x7e,0xef,0xc6,0x3,0xeb,0xde,0xc5,0x2e,0xff,0xe3,0xf2,0x39,0xf7,0xc1,0xde]
v40=    [0x19,0xc4,0xbf,0xf2,0x27,0xfe,0x84,0xd2,0x14,0xe4,0x81,0xca,0x26,0xf0,0xa7,0xe8,0x0,0x7f,0xaf,0xc6,0x3,0xec,0x9e,0xc5,0x2f,0xc0,0xa3,0xf2,0x39,0xf8,0x81,0xde]

XOR_flag=[0x22,0x1e,0x1b,0x4b,0x2d,0x17,0x05,0x0c,0x15,0x59,0x0e,0x78,0x23,0x26,0x33,0x2e,0x10,0x07,0x4f,0x73,0x18,0x36,0x58,0x0b,0x29,0x0f,0x5c,0x3a,0x0c,0x62,0x76,0x21]

E0=[0x00,0x10,0x13,0x04,0xbf,0xbf,0xb9,0xb9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x00,0x10,0x13,0x04,0xbf,0xbf,0xb9,0xb9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0]


#v40=[0x19,0xc5,0x7f,0xf2,0x27,0xff,0x44,0xd2,0x14,0xe5,0x41,0xca,0x26,0xf1,0x67,0xe8,0x0,0x80,0x6f,0xc6,0x3,0xed,0x5e,0xc5,0x2f,0xc1,0x63,0xf2,0x39,0xf9,0x41,0xde


#note that the FF means doesnt matter because the shuffle would ignore them anyway 
X1 = [ BitVec('x%s' % i,8) for i in range(32) ]

#x=Int('x')
Y = [ BitVec('x%s' % i,8) for i in range(32) ]



# X1[i]+Y ==v40[i]  Y==E0[k],
#Or(X1[i] ^ XOR_flag[i]<=0x39, X1[i] ^ XOR_flag[i]>=0x30,X1[i] ^ XOR_flag[i]>=0x41,X1[i] ^ XOR_flag[i]<=0x5A, X1[i] ^ XOR_flag[i]<=0x7A , X1[i] ^ XOR_flag[i]>=0x61 , X1[i] ^ XOR_flag[i]==0x5F)

s=Solver()

#for i in range(0,0):

#Y[i]==0x10,Y[i]==0x13,Y[i]==0x04, Y[i]==0xbf, Y[i]==0xb9))


for i in range(0,32):
	for k in range(0,7):
		s.add(X1[i]+E0[k] ==v40[i])
		if (s.check()==sat):
			a= s.model()
			print a
			s.reset()

	#s.add( Or(And(X1[i] ^ XOR_flag[i]<=0x39, X1[i] ^ XOR_flag[i]>=0x30), And(X1[i] ^ XOR_flag[i]>=0x41,X1[i] ^ XOR_flag[i]<=0x5A), And(X1[i] ^ XOR_flag[i]<=0x7A , X1[i] ^ XOR_flag[i]>=0x61) , X1[i] ^ (XOR_flag[i])==0x5F)
#)
#s.add(X1[i] ^ XOR_flag[i] <0x7A)

	
